rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == 'admin';
    }

    // Match the Users collection
    match /Users/{userId} {
      // Allow reading the user document only if the user is authenticated and the document matches the user's ID
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow writing to the user document only if the user is authenticated and the document matches the user's ID
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Match the places collection
    match /places/{placeId} {
      // Allow reading places if user is authenticated
      allow read: if request.auth != null;
      
      // Allow creating places if user is authenticated
      allow create: if request.auth != null && 
                   request.resource.data.addedBy == request.auth.uid;
      
      // Allow updating places if user is authenticated and is the creator or an admin
      allow update: if request.auth != null && 
                   (resource.data.addedBy == request.auth.uid || isAdmin());
      
      // Allow deleting places only for admins
      allow delete: if request.auth != null && isAdmin();
    }

    // Match the notifications collection
    match /notifications/{notificationId} {
      // Allow reading notifications if user is authenticated and is the recipient
      allow read: if request.auth != null && 
                 resource.data.userId == request.auth.uid;
      
      // Allow creating notifications from client-side
      allow create: if request.auth != null;
      
      // Allow updating and deleting notifications if user is authenticated and is the recipient or an admin
      allow update, delete: if request.auth != null && 
                          (resource.data.userId == request.auth.uid || isAdmin());

      // Allow listing notifications
      allow list: if request.auth != null;
    }

    // Add collection group rule for Users
    match /{path=**}/Users/{userId} {
      allow read: if request.auth != null;
    }

    // Match the reportedPlaces collection
    match /reportedPlaces/{reportId} {
      // Allow creating reports for any authenticated user
      allow create: if request.auth != null;

      // Allow reading if user is the reporter or an admin
      allow read: if request.auth != null && 
                  (resource.data.reportedBy == request.auth.uid || isAdmin());

      // Allow updates and deletes only for admins
      allow update, delete: if request.auth != null && isAdmin();
    }

    // Match the reviews collection
    match /reviews/{reviewId} {
      // Allow reading reviews if user is authenticated
      allow read: if request.auth != null;

      // Allow creating reviews if user is authenticated
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;

      // Allow updating and deleting reviews if user is authenticated and is the creator or an admin
      allow update, delete: if request.auth != null && 
                          (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
}
